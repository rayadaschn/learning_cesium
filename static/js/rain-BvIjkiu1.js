import{b as e,d as n,h as a,_ as o,u as t,r,o as i,c as s,a as l,w as c,g as u}from"./index-0Tz4rwi2.js";const v={class:"container"},f=o({__name:"rain",setup(o){const f=t(),{show:m}=function(o,t={}){const r=e(t.tiltAngle??-.6),i=e(t.rainSize??.3),s=e(t.rainSpeed??60);let l=null;return n((()=>{if(!o)throw new Error("No viewer object!");l=new Cesium.PostProcessStage({name:"czm_rain",fragmentShader:"\n    uniform sampler2D colorTexture;\n    in vec2 v_textureCoordinates;\n    uniform float tiltAngle;\n    uniform float rainSize;\n    uniform float rainSpeed;\n    float hash(float x) {\n      return fract(sin(x * 133.3) * 13.13);\n    }\n    out vec4 fragColor;\n    void main(void) {\n      float time = czm_frameNumber / rainSpeed;\n      vec2 resolution = czm_viewport.zw;\n      vec2 uv = (gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);\n      vec3 c = vec3(.6, .7, .8);\n      float a = tiltAngle;\n      float si = sin(a), co = cos(a);\n      uv *= mat2(co, -si, si, co);\n      uv *= length(uv + vec2(0, 4.9)) * rainSize + 1.;\n      float v = 1. - sin(hash(floor(uv.x * 100.)) * 2.);\n      float b = clamp(abs(sin(20. * time * v + uv.y * (5. / (2. + v)))) - .95, 0., 1.) * 20.;\n      c *= v * b;\n      fragColor = mix(texture(colorTexture, v_textureCoordinates), vec4(c, 1), .5);\n    }\n  ",uniforms:{tiltAngle:()=>r.value,rainSize:()=>i.value,rainSpeed:()=>s.value}}),o.scene.postProcessStages.add(l)})),a((()=>{o&&l&&(o.scene.postProcessStages.remove(l),l.isDestroyed()||l.destroy(),l=null)})),{tiltAngle:r,rainSize:i,rainSpeed:s,show:e=>{l&&(l.enabled=e)}}}(f.viewer,{tiltAngle:-.5,rainSize:.4,rainSpeed:50}),d=()=>{m(!1)},p=()=>{m(!0)};return(e,n)=>{const a=r("el-button");return i(),s("div",v,[l(a,{type:"primary",onClick:p},{default:c((()=>[u("开始")])),_:1}),l(a,{type:"primary",onClick:d},{default:c((()=>[u("停止")])),_:1})])}}},[["__scopeId","data-v-a42d1a08"]]);export{f as default};
